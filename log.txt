Line 1: type_specifier : INT

int

Line 1: declaration_list : ID

a

Line 1: declaration_list : declaration_list COMMA ID

a,b

Line 1: declaration_list : declaration_list COMMA ID LTHIRD CONST_INT RTHIRD

a,b,c[2]

Line 1: var_declaration : type_specifier declaration_list SEMICOLON

int a,b,c[2];

Line 1: unit : var_declaration

int a,b,c[2];


Line 1: program : unit

int a,b,c[2];


Line 3: type_specifier : INT

int

Line 3: type_specifier : INT

int

Line 3: parameter_list : type_specifier ID

int a

Line 3: type_specifier : INT

int

Line 3: parameter_list : parameter_list COMMA type_specifier ID

int a,int b

Line 5: variable : ID

a

Line 5: factor : variable

a

Line 5: unary_expression : factor

a

Line 5: term : unary_expression

a

Line 5: simple_expression : term

a

Line 5: rel_expression : simple_expression

a

Line 5: logic_expression : rel_expression

a

Line 5: expression : logic_expression

a

Line 5: factor : LPAREN expression RPAREN

(a)

Line 5: unary_expression : factor

(a)

Line 5: term : unary_expression

(a)

Line 5: simple_expression : term

(a)

Line 5: rel_expression : simple_expression

(a)

Line 5: logic_expression : rel_expression

(a)

Line 5: expression : logic_expression

(a)

Line 5: statement : RETURN expression SEMICOLON

return (a);


Line 5: statements : statement

return (a);


Line 6: compound_statement : LCURL statements RCURL

{
return (a);
}




ScopeTable # 1_1 
4 -->  < a : ID> 
5 -->  < b : ID> 



ScopeTable # 1 
4 -->  < a : ID> 
5 -->  < b : ID> 
6 -->  < c : ID> 
17 -->  < add : ID> 

Line 6: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int add(int a,int b){
return (a);
}

Line 6: unit : func_definition

int add(int a,int b){
return (a);
}


Line 6: program : program unit

int a,b,c[2];
int add(int a,int b){
return (a);
}


Line 8: type_specifier : INT

int

Line 9: variable : ID

a

Line 9: factor : CONST_INT

0

Line 9: unary_expression : factor

0

Line 9: unary_expression : ADDOP unary_expression

!0

Line 9: term : unary_expression

!0

Line 9: simple_expression : term

!0

Line 9: rel_expression : simple_expression

!0

Line 9: logic_expression : rel_expression

!0

Line 9: expression : variable ASSIGNOP logic_expression

a=!0

Line 9: expression_statement : expression SEMICOLON

a=!0;

Line 9: statement : expression_statement

a=!0;


Line 9: statements : statement

a=!0;


Line 10: variable : ID

a

Line 10: variable : ID

a

Line 10: factor : variable

a

Line 10: unary_expression : factor

a

Line 10: term : unary_expression

a

Line 10: simple_expression : term

a

Line 10: rel_expression : simple_expression

a

Line 10: factor : CONST_INT

5

Line 10: unary_expression : factor

5

Line 10: term : unary_expression

5

Line 10: simple_expression : term

5

Line 10: rel_expression : simple_expression

5

Line 10: logic_expression : rel_expression LOGICOP rel_expression 

a||5

Line 10: expression : variable ASSIGNOP logic_expression

a=a||5

Line 10: expression_statement : expression SEMICOLON

a=a||5;

Line 10: statement : expression_statement

a=a||5;


Line 10: statements : statements statement

a=!0;
a=a||5;


Line 11: variable : ID

a

Line 11: variable : ID

a

Line 11: factor : variable

a

Line 11: unary_expression : factor

a

Line 11: term : unary_expression

a

Line 11: simple_expression : term

a

Line 11: rel_expression : simple_expression

a

Line 11: factor : CONST_INT

5

Line 11: unary_expression : factor

5

Line 11: term : unary_expression

5

Line 11: simple_expression : term

5

Line 11: rel_expression : simple_expression

5

Line 11: logic_expression : rel_expression LOGICOP rel_expression 

a&&5

Line 11: expression : variable ASSIGNOP logic_expression

a=a&&5

Line 11: expression_statement : expression SEMICOLON

a=a&&5;

Line 11: statement : expression_statement

a=a&&5;


Line 11: statements : statements statement

a=!0;
a=a||5;
a=a&&5;


Line 12: variable : ID

a

Line 12: variable : ID

a

Line 12: factor : variable

a

Line 12: unary_expression : factor

a

Line 12: term : unary_expression

a

Line 12: simple_expression : term

a

Line 12: factor : CONST_INT

5

Line 12: unary_expression : factor

5

Line 12: term : unary_expression

5

Line 12: simple_expression : term

5

Line 12: rel_expression : simple_expression RELOP simple_expression	

a>=5

Line 12: logic_expression : rel_expression

a>=5

Line 12: expression : variable ASSIGNOP logic_expression

a=a>=5

Line 12: expression_statement : expression SEMICOLON

a=a>=5;

Line 12: statement : expression_statement

a=a>=5;


Line 12: statements : statements statement

a=!0;
a=a||5;
a=a&&5;
a=a>=5;


Line 13: variable : ID

a

Line 13: variable : ID

a

Line 13: factor : variable

a

Line 13: unary_expression : factor

a

Line 13: term : unary_expression

a

Line 13: simple_expression : term

a

Line 13: factor : CONST_INT

5

Line 13: unary_expression : factor

5

Line 13: term : unary_expression

5

Line 13: simple_expression : term

5

Line 13: rel_expression : simple_expression RELOP simple_expression	

a<=5

Line 13: logic_expression : rel_expression

a<=5

Line 13: expression : variable ASSIGNOP logic_expression

a=a<=5

Line 13: expression_statement : expression SEMICOLON

a=a<=5;

Line 13: statement : expression_statement

a=a<=5;


Line 13: statements : statements statement

a=!0;
a=a||5;
a=a&&5;
a=a>=5;
a=a<=5;


Line 14: factor : CONST_INT

0

Line 14: unary_expression : factor

0

Line 14: term : unary_expression

0

Line 14: simple_expression : term

0

Line 14: rel_expression : simple_expression

0

Line 14: logic_expression : rel_expression

0

Line 14: expression : logic_expression

0

Line 14: variable : ID LTHIRD expression RTHIRD 

c[0]

Line 14: factor : CONST_INT

5

Line 14: unary_expression : factor

5

Line 14: term : unary_expression

5

Line 14: simple_expression : term

5

Line 14: rel_expression : simple_expression

5

Line 14: logic_expression : rel_expression

5

Line 14: expression : variable ASSIGNOP logic_expression

c[0]=5

Line 14: expression_statement : expression SEMICOLON

c[0]=5;

Line 14: statement : expression_statement

c[0]=5;


Line 14: statements : statements statement

a=!0;
a=a||5;
a=a&&5;
a=a>=5;
a=a<=5;
c[0]=5;


Line 15: variable : ID

a

Line 15: factor : CONST_INT

19

Line 15: unary_expression : factor

19

Line 15: term : unary_expression

19

Line 15: simple_expression : term

19

Line 15: rel_expression : simple_expression

19

Line 15: logic_expression : rel_expression

19

Line 15: expression : variable ASSIGNOP logic_expression

a=19

Line 15: expression_statement : expression SEMICOLON

a=19;

Line 15: statement : expression_statement

a=19;


Line 15: statements : statements statement

a=!0;
a=a||5;
a=a&&5;
a=a>=5;
a=a<=5;
c[0]=5;
a=19;


Line 16: variable : ID

a

Line 16: variable : ID

a

Line 16: factor : variable

a

Line 16: unary_expression : factor

a

Line 16: term : unary_expression

a

Line 16: simple_expression : term

a

Line 16: factor : CONST_INT

0

Line 16: unary_expression : factor

0

Line 16: term : unary_expression

0

Line 16: simple_expression : term

0

Line 16: rel_expression : simple_expression

0

Line 16: logic_expression : rel_expression

0

Line 16: expression : logic_expression

0

Line 16: variable : ID LTHIRD expression RTHIRD 

c[0]

Line 16: factor : variable

c[0]

Line 16: unary_expression : factor

c[0]

Line 16: term : unary_expression

c[0]

Line 16: simple_expression : simple_expression ADDOP term

a+c[0]

Line 16: rel_expression : simple_expression

a+c[0]

Line 16: logic_expression : rel_expression

a+c[0]

Line 16: expression : variable ASSIGNOP logic_expression

a=a+c[0]

Line 16: expression_statement : expression SEMICOLON

a=a+c[0];

Line 16: statement : expression_statement

a=a+c[0];


Line 16: statements : statements statement

a=!0;
a=a||5;
a=a&&5;
a=a>=5;
a=a<=5;
c[0]=5;
a=19;
a=a+c[0];


Line 17: variable : ID

a

Line 17: variable : ID

a

Line 17: factor : variable

a

Line 17: unary_expression : factor

a

Line 17: term : unary_expression

a

Line 17: simple_expression : term

a

Line 17: factor : CONST_INT

0

Line 17: unary_expression : factor

0

Line 17: term : unary_expression

0

Line 17: simple_expression : term

0

Line 17: rel_expression : simple_expression

0

Line 17: logic_expression : rel_expression

0

Line 17: expression : logic_expression

0

Line 17: variable : ID LTHIRD expression RTHIRD 

c[0]

Line 17: factor : variable

c[0]

Line 17: unary_expression : factor

c[0]

Line 17: term : unary_expression

c[0]

Line 17: simple_expression : simple_expression ADDOP term

a-c[0]

Line 17: rel_expression : simple_expression

a-c[0]

Line 17: logic_expression : rel_expression

a-c[0]

Line 17: expression : variable ASSIGNOP logic_expression

a=a-c[0]

Line 17: expression_statement : expression SEMICOLON

a=a-c[0];

Line 17: statement : expression_statement

a=a-c[0];


Line 17: statements : statements statement

a=!0;
a=a||5;
a=a&&5;
a=a>=5;
a=a<=5;
c[0]=5;
a=19;
a=a+c[0];
a=a-c[0];


Line 18: variable : ID

a

Line 18: variable : ID

a

Line 18: factor : variable

a

Line 18: unary_expression : factor

a

Line 18: term : unary_expression

a

Line 18: factor : CONST_INT

0

Line 18: unary_expression : factor

0

Line 18: term : unary_expression

0

Line 18: simple_expression : term

0

Line 18: rel_expression : simple_expression

0

Line 18: logic_expression : rel_expression

0

Line 18: expression : logic_expression

0

Line 18: variable : ID LTHIRD expression RTHIRD 

c[0]

Line 18: factor : variable

c[0]

Line 18: unary_expression : factor

c[0]

Line 18: term : term MULOP unary_expression

a%c[0]

Line 18: simple_expression : term

a%c[0]

Line 18: rel_expression : simple_expression

a%c[0]

Line 18: logic_expression : rel_expression

a%c[0]

Line 18: expression : variable ASSIGNOP logic_expression

a=a%c[0]

Line 18: expression_statement : expression SEMICOLON

a=a%c[0];

Line 18: statement : expression_statement

a=a%c[0];


Line 18: statements : statements statement

a=!0;
a=a||5;
a=a&&5;
a=a>=5;
a=a<=5;
c[0]=5;
a=19;
a=a+c[0];
a=a-c[0];
a=a%c[0];


Line 19: variable : ID

a

Line 19: variable : ID

a

Line 19: factor : variable

a

Line 19: unary_expression : factor

a

Line 19: term : unary_expression

a

Line 19: factor : CONST_INT

0

Line 19: unary_expression : factor

0

Line 19: term : unary_expression

0

Line 19: simple_expression : term

0

Line 19: rel_expression : simple_expression

0

Line 19: logic_expression : rel_expression

0

Line 19: expression : logic_expression

0

Line 19: variable : ID LTHIRD expression RTHIRD 

c[0]

Line 19: factor : variable

c[0]

Line 19: unary_expression : factor

c[0]

Line 19: term : term MULOP unary_expression

a/c[0]

Line 19: simple_expression : term

a/c[0]

Line 19: rel_expression : simple_expression

a/c[0]

Line 19: logic_expression : rel_expression

a/c[0]

Line 19: expression : variable ASSIGNOP logic_expression

a=a/c[0]

Line 19: expression_statement : expression SEMICOLON

a=a/c[0];

Line 19: statement : expression_statement

a=a/c[0];


Line 19: statements : statements statement

a=!0;
a=a||5;
a=a&&5;
a=a>=5;
a=a<=5;
c[0]=5;
a=19;
a=a+c[0];
a=a-c[0];
a=a%c[0];
a=a/c[0];


Line 20: variable : ID

a

Line 20: variable : ID

a

Line 20: factor : variable

a

Line 20: unary_expression : factor

a

Line 20: term : unary_expression

a

Line 20: factor : CONST_INT

0

Line 20: unary_expression : factor

0

Line 20: term : unary_expression

0

Line 20: simple_expression : term

0

Line 20: rel_expression : simple_expression

0

Line 20: logic_expression : rel_expression

0

Line 20: expression : logic_expression

0

Line 20: variable : ID LTHIRD expression RTHIRD 

c[0]

Line 20: factor : variable

c[0]

Line 20: unary_expression : factor

c[0]

Line 20: term : term MULOP unary_expression

a*c[0]

Line 20: simple_expression : term

a*c[0]

Line 20: rel_expression : simple_expression

a*c[0]

Line 20: logic_expression : rel_expression

a*c[0]

Line 20: expression : variable ASSIGNOP logic_expression

a=a*c[0]

Line 20: expression_statement : expression SEMICOLON

a=a*c[0];

Line 20: statement : expression_statement

a=a*c[0];


Line 20: statements : statements statement

a=!0;
a=a||5;
a=a&&5;
a=a>=5;
a=a<=5;
c[0]=5;
a=19;
a=a+c[0];
a=a-c[0];
a=a%c[0];
a=a/c[0];
a=a*c[0];


Line 21: variable : ID

a

Line 21: variable : ID

a

Line 21: factor : variable

a

Line 21: unary_expression : factor

a

Line 21: unary_expression : ADDOP unary_expression

!a

Line 21: term : unary_expression

!a

Line 21: simple_expression : term

!a

Line 21: rel_expression : simple_expression

!a

Line 21: logic_expression : rel_expression

!a

Line 21: expression : variable ASSIGNOP logic_expression

a=!a

Line 21: expression_statement : expression SEMICOLON

a=!a;

Line 21: statement : expression_statement

a=!a;


Line 21: statements : statements statement

a=!0;
a=a||5;
a=a&&5;
a=a>=5;
a=a<=5;
c[0]=5;
a=19;
a=a+c[0];
a=a-c[0];
a=a%c[0];
a=a/c[0];
a=a*c[0];
a=!a;


Line 22: factor : CONST_INT

1

Line 22: unary_expression : factor

1

Line 22: term : unary_expression

1

Line 22: simple_expression : term

1

Line 22: rel_expression : simple_expression

1

Line 22: logic_expression : rel_expression

1

Line 22: expression : logic_expression

1

Line 22: variable : ID LTHIRD expression RTHIRD 

c[1]

Line 22: variable : ID

a

Line 22: factor : variable

a

Line 22: unary_expression : factor

a

Line 22: unary_expression : ADDOP unary_expression

+a

Line 22: term : unary_expression

+a

Line 22: simple_expression : term

+a

Line 22: rel_expression : simple_expression

+a

Line 22: logic_expression : rel_expression

+a

Line 22: expression : variable ASSIGNOP logic_expression

c[1]=+a

Line 22: expression_statement : expression SEMICOLON

c[1]=+a;

Line 22: statement : expression_statement

c[1]=+a;


Line 22: statements : statements statement

a=!0;
a=a||5;
a=a&&5;
a=a>=5;
a=a<=5;
c[0]=5;
a=19;
a=a+c[0];
a=a-c[0];
a=a%c[0];
a=a/c[0];
a=a*c[0];
a=!a;
c[1]=+a;


Line 23: factor : CONST_INT

1

Line 23: unary_expression : factor

1

Line 23: term : unary_expression

1

Line 23: simple_expression : term

1

Line 23: rel_expression : simple_expression

1

Line 23: logic_expression : rel_expression

1

Line 23: expression : logic_expression

1

Line 23: variable : ID LTHIRD expression RTHIRD 

c[1]

Line 23: variable : ID

a

Line 23: factor : variable

a

Line 23: unary_expression : factor

a

Line 23: unary_expression : ADDOP unary_expression

-a

Line 23: term : unary_expression

-a

Line 23: simple_expression : term

-a

Line 23: rel_expression : simple_expression

-a

Line 23: logic_expression : rel_expression

-a

Line 23: expression : variable ASSIGNOP logic_expression

c[1]=-a

Line 23: expression_statement : expression SEMICOLON

c[1]=-a;

Line 23: statement : expression_statement

c[1]=-a;


Line 23: statements : statements statement

a=!0;
a=a||5;
a=a&&5;
a=a>=5;
a=a<=5;
c[0]=5;
a=19;
a=a+c[0];
a=a-c[0];
a=a%c[0];
a=a/c[0];
a=a*c[0];
a=!a;
c[1]=+a;
c[1]=-a;


Line 24: factor : CONST_INT

0

Line 24: unary_expression : factor

0

Line 24: term : unary_expression

0

Line 24: simple_expression : term

0

Line 24: rel_expression : simple_expression

0

Line 24: logic_expression : rel_expression

0

Line 24: expression : logic_expression

0

Line 24: variable : ID LTHIRD expression RTHIRD 

c[0]

Line 24: factor : CONST_INT

1

Line 24: unary_expression : factor

1

Line 24: term : unary_expression

1

Line 24: simple_expression : term

1

Line 24: rel_expression : simple_expression

1

Line 24: logic_expression : rel_expression

1

Line 24: expression : logic_expression

1

Line 24: variable : ID LTHIRD expression RTHIRD 

c[1]

Line 24: factor : variable

c[1]

Line 24: unary_expression : factor

c[1]

Line 24: term : unary_expression

c[1]

Line 24: simple_expression : term

c[1]

Line 24: rel_expression : simple_expression

c[1]

Line 24: logic_expression : rel_expression

c[1]

Line 24: expression : logic_expression

c[1]

Line 24: factor : LPAREN expression RPAREN

(c[1])

Line 24: unary_expression : factor

(c[1])

Line 24: term : unary_expression

(c[1])

Line 24: simple_expression : term

(c[1])

Line 24: rel_expression : simple_expression

(c[1])

Line 24: logic_expression : rel_expression

(c[1])

Line 24: expression : variable ASSIGNOP logic_expression

c[0]=(c[1])

Line 24: expression_statement : expression SEMICOLON

c[0]=(c[1]);

Line 24: statement : expression_statement

c[0]=(c[1]);


Line 24: statements : statements statement

a=!0;
a=a||5;
a=a&&5;
a=a>=5;
a=a<=5;
c[0]=5;
a=19;
a=a+c[0];
a=a-c[0];
a=a%c[0];
a=a/c[0];
a=a*c[0];
a=!a;
c[1]=+a;
c[1]=-a;
c[0]=(c[1]);


Line 25: variable : ID

a

Line 25: factor : variable INCOP

a++

Line 25: unary_expression : factor

a++

Line 25: term : unary_expression

a++

Line 25: simple_expression : term

a++

Line 25: rel_expression : simple_expression

a++

Line 25: logic_expression : rel_expression

a++

Line 25: expression : logic_expression

a++

Line 25: expression_statement : expression SEMICOLON

a++;

Line 25: statement : expression_statement

a++;


Line 25: statements : statements statement

a=!0;
a=a||5;
a=a&&5;
a=a>=5;
a=a<=5;
c[0]=5;
a=19;
a=a+c[0];
a=a-c[0];
a=a%c[0];
a=a/c[0];
a=a*c[0];
a=!a;
c[1]=+a;
c[1]=-a;
c[0]=(c[1]);
a++;


Line 26: factor : CONST_INT

0

Line 26: unary_expression : factor

0

Line 26: term : unary_expression

0

Line 26: simple_expression : term

0

Line 26: rel_expression : simple_expression

0

Line 26: logic_expression : rel_expression

0

Line 26: expression : logic_expression

0

Line 26: variable : ID LTHIRD expression RTHIRD 

c[0]

Line 26: factor : variable INCOP

c[0]++

Line 26: unary_expression : factor

c[0]++

Line 26: term : unary_expression

c[0]++

Line 26: simple_expression : term

c[0]++

Line 26: rel_expression : simple_expression

c[0]++

Line 26: logic_expression : rel_expression

c[0]++

Line 26: expression : logic_expression

c[0]++

Line 26: expression_statement : expression SEMICOLON

c[0]++;

Line 26: statement : expression_statement

c[0]++;


Line 26: statements : statements statement

a=!0;
a=a||5;
a=a&&5;
a=a>=5;
a=a<=5;
c[0]=5;
a=19;
a=a+c[0];
a=a-c[0];
a=a%c[0];
a=a/c[0];
a=a*c[0];
a=!a;
c[1]=+a;
c[1]=-a;
c[0]=(c[1]);
a++;
c[0]++;


Line 27: variable : ID

a

Line 27: factor : variable

a

Line 27: unary_expression : factor

a

Line 27: term : unary_expression

a

Line 27: simple_expression : term

a

Line 27: rel_expression : simple_expression

a

Line 27: logic_expression : rel_expression

a

Line 27: arguments : logic_expression

a

Line 27: variable : ID

b

Line 27: factor : variable

b

Line 27: unary_expression : factor

b

Line 27: term : unary_expression

b

Line 27: simple_expression : term

b

Line 27: rel_expression : simple_expression

b

Line 27: logic_expression : rel_expression

b

Line 27: arguments : arguments COMMA logic_expression

a,b

Line 27: argument_list : arguments

a,b

Line 27: factor : ID LPAREN argument_list RPAREN

add(a,b)

Line 27: unary_expression : factor

add(a,b)

Line 27: term : unary_expression

add(a,b)

Line 27: simple_expression : term

add(a,b)

Line 27: rel_expression : simple_expression

add(a,b)

Line 27: logic_expression : rel_expression

add(a,b)

Line 27: expression : logic_expression

add(a,b)

Line 27: expression_statement : expression SEMICOLON

add(a,b);

Line 27: statement : expression_statement

add(a,b);


Line 27: statements : statements statement

a=!0;
a=a||5;
a=a&&5;
a=a>=5;
a=a<=5;
c[0]=5;
a=19;
a=a+c[0];
a=a-c[0];
a=a%c[0];
a=a/c[0];
a=a*c[0];
a=!a;
c[1]=+a;
c[1]=-a;
c[0]=(c[1]);
a++;
c[0]++;
add(a,b);


Line 28: compound_statement : LCURL statements RCURL

{
a=!0;
a=a||5;
a=a&&5;
a=a>=5;
a=a<=5;
c[0]=5;
a=19;
a=a+c[0];
a=a-c[0];
a=a%c[0];
a=a/c[0];
a=a*c[0];
a=!a;
c[1]=+a;
c[1]=-a;
c[0]=(c[1]);
a++;
c[0]++;
add(a,b);
}




ScopeTable # 1_2 



ScopeTable # 1 
4 -->  < a : ID> 
5 -->  < b : ID> 
6 -->  < c : ID> 
16 -->  < main : ID> 
17 -->  < add : ID> 

Line 28: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
a=!0;
a=a||5;
a=a&&5;
a=a>=5;
a=a<=5;
c[0]=5;
a=19;
a=a+c[0];
a=a-c[0];
a=a%c[0];
a=a/c[0];
a=a*c[0];
a=!a;
c[1]=+a;
c[1]=-a;
c[0]=(c[1]);
a++;
c[0]++;
add(a,b);
}

Line 28: unit : func_definition

int main(){
a=!0;
a=a||5;
a=a&&5;
a=a>=5;
a=a<=5;
c[0]=5;
a=19;
a=a+c[0];
a=a-c[0];
a=a%c[0];
a=a/c[0];
a=a*c[0];
a=!a;
c[1]=+a;
c[1]=-a;
c[0]=(c[1]);
a++;
c[0]++;
add(a,b);
}


Line 28: program : program unit

int a,b,c[2];
int add(int a,int b){
return (a);
}
int main(){
a=!0;
a=a||5;
a=a&&5;
a=a>=5;
a=a<=5;
c[0]=5;
a=19;
a=a+c[0];
a=a-c[0];
a=a%c[0];
a=a/c[0];
a=a*c[0];
a=!a;
c[1]=+a;
c[1]=-a;
c[0]=(c[1]);
a++;
c[0]++;
add(a,b);
}


Line 28: start : program





ScopeTable # 1 
4 -->  < a : ID> 
5 -->  < b : ID> 
6 -->  < c : ID> 
16 -->  < main : ID> 
17 -->  < add : ID> 


Total lines: 28
Total errors: 0

