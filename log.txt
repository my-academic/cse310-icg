Line 1: type_specifier : INT

int

Line 1: declaration_list : ID

a

Line 1: declaration_list : declaration_list COMMA ID

a,b

Line 1: declaration_list : declaration_list COMMA ID LTHIRD CONST_INT RTHIRD

a,b,c[2]

Line 1: var_declaration : type_specifier declaration_list SEMICOLON

int a,b,c[2];

Line 1: unit : var_declaration

int a,b,c[2];


Line 1: program : unit

int a,b,c[2];


Line 3: type_specifier : INT

int

Line 3: type_specifier : INT

int

Line 3: parameter_list : type_specifier ID

int a

Line 3: type_specifier : INT

int

Line 3: parameter_list : parameter_list COMMA type_specifier ID

int a,int b

Line 5: compound_statement : LCURL RCURL

{}


Line 5: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int add(int a,int b){}

Line 5: unit : func_definition

int add(int a,int b){}


Line 5: program : program unit

int a,b,c[2];
int add(int a,int b){}


Line 7: type_specifier : INT

int

Line 7: type_specifier : INT

int

Line 7: parameter_list : type_specifier ID

int x

Line 7: type_specifier : INT

int

Line 7: parameter_list : parameter_list COMMA type_specifier ID

int x,int y

Line 8: variable : ID

a

Line 8: factor : CONST_INT

5

Line 8: unary_expression : factor

5

Line 8: term : unary_expression

5

Line 8: simple_expression : term

5

Line 8: rel_expression : simple_expression

5

Line 8: logic_expression : rel_expression

5

Line 8: expression : variable ASSIGNOP logic_expression

a=5

Line 8: expression_statement : expression SEMICOLON

a=5;

Line 8: statement : expression_statement

a=5;


Line 8: statements : statement

a=5;


Line 9: factor : CONST_INT

1

Line 9: unary_expression : factor

1

Line 9: term : unary_expression

1

Line 9: simple_expression : term

1

Line 9: rel_expression : simple_expression

1

Line 9: logic_expression : rel_expression

1

Line 9: expression : logic_expression

1

Line 9: variable : ID LTHIRD expression RTHIRD 

c[1]

Line 9: variable : ID

a

Line 9: factor : variable

a

Line 9: unary_expression : factor

a

Line 9: term : unary_expression

a

Line 9: simple_expression : term

a

Line 9: rel_expression : simple_expression

a

Line 9: logic_expression : rel_expression

a

Line 9: expression : variable ASSIGNOP logic_expression

c[1]=a

Line 9: expression_statement : expression SEMICOLON

c[1]=a;

Line 9: statement : expression_statement

c[1]=a;


Line 9: statements : statements statement

a=5;
c[1]=a;


Line 10: factor : CONST_INT

0

Line 10: unary_expression : factor

0

Line 10: term : unary_expression

0

Line 10: simple_expression : term

0

Line 10: rel_expression : simple_expression

0

Line 10: logic_expression : rel_expression

0

Line 10: expression : logic_expression

0

Line 10: variable : ID LTHIRD expression RTHIRD 

c[0]

Line 10: factor : CONST_INT

1

Line 10: unary_expression : factor

1

Line 10: term : unary_expression

1

Line 10: simple_expression : term

1

Line 10: rel_expression : simple_expression

1

Line 10: logic_expression : rel_expression

1

Line 10: expression : logic_expression

1

Line 10: variable : ID LTHIRD expression RTHIRD 

c[1]

Line 10: factor : variable

c[1]

Line 10: unary_expression : factor

c[1]

Line 10: term : unary_expression

c[1]

Line 10: simple_expression : term

c[1]

Line 10: rel_expression : simple_expression

c[1]

Line 10: logic_expression : rel_expression

c[1]

Line 10: expression : logic_expression

c[1]

Line 10: factor : LPAREN expression RPAREN

(c[1])

Line 10: unary_expression : factor

(c[1])

Line 10: term : unary_expression

(c[1])

Line 10: simple_expression : term

(c[1])

Line 10: rel_expression : simple_expression

(c[1])

Line 10: logic_expression : rel_expression

(c[1])

Line 10: expression : variable ASSIGNOP logic_expression

c[0]=(c[1])

Line 10: expression_statement : expression SEMICOLON

c[0]=(c[1]);

Line 10: statement : expression_statement

c[0]=(c[1]);


Line 10: statements : statements statement

a=5;
c[1]=a;
c[0]=(c[1]);


Line 11: variable : ID

a

Line 11: factor : variable INCOP

a++

Line 11: unary_expression : factor

a++

Line 11: term : unary_expression

a++

Line 11: simple_expression : term

a++

Line 11: rel_expression : simple_expression

a++

Line 11: logic_expression : rel_expression

a++

Line 11: expression : logic_expression

a++

Line 11: expression_statement : expression SEMICOLON

a++;

Line 11: statement : expression_statement

a++;


Line 11: statements : statements statement

a=5;
c[1]=a;
c[0]=(c[1]);
a++;


Line 12: factor : CONST_INT

0

Line 12: unary_expression : factor

0

Line 12: term : unary_expression

0

Line 12: simple_expression : term

0

Line 12: rel_expression : simple_expression

0

Line 12: logic_expression : rel_expression

0

Line 12: expression : logic_expression

0

Line 12: variable : ID LTHIRD expression RTHIRD 

c[0]

Line 12: factor : variable INCOP

c[0]++

Line 12: unary_expression : factor

c[0]++

Line 12: term : unary_expression

c[0]++

Line 12: simple_expression : term

c[0]++

Line 12: rel_expression : simple_expression

c[0]++

Line 12: logic_expression : rel_expression

c[0]++

Line 12: expression : logic_expression

c[0]++

Line 12: expression_statement : expression SEMICOLON

c[0]++;

Line 12: statement : expression_statement

c[0]++;


Line 12: statements : statements statement

a=5;
c[1]=a;
c[0]=(c[1]);
a++;
c[0]++;


Line 13: compound_statement : LCURL statements RCURL

{
a=5;
c[1]=a;
c[0]=(c[1]);
a++;
c[0]++;
}




ScopeTable # 1_2 
27 -->  < x : ID> 
28 -->  < y : ID> 



ScopeTable # 1 
4 -->  < a : ID> 
5 -->  < b : ID> 
6 -->  < c : ID> 
16 -->  < main : ID> 
17 -->  < add : ID> 

Line 13: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int main(int x,int y){
a=5;
c[1]=a;
c[0]=(c[1]);
a++;
c[0]++;
}

Line 13: unit : func_definition

int main(int x,int y){
a=5;
c[1]=a;
c[0]=(c[1]);
a++;
c[0]++;
}


Line 13: program : program unit

int a,b,c[2];
int add(int a,int b){}
int main(int x,int y){
a=5;
c[1]=a;
c[0]=(c[1]);
a++;
c[0]++;
}


Line 13: start : program





ScopeTable # 1 
4 -->  < a : ID> 
5 -->  < b : ID> 
6 -->  < c : ID> 
16 -->  < main : ID> 
17 -->  < add : ID> 


Total lines: 13
Total errors: 0

