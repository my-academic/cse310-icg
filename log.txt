Line 1: type_specifier : INT

int

Line 3: type_specifier : INT

int

Line 3: declaration_list : ID

i

Line 3: declaration_list : declaration_list COMMA ID

i,j

Line 3: declaration_list : declaration_list COMMA ID

i,j,k

Line 3: declaration_list : declaration_list COMMA ID

i,j,k,ll

Line 3: declaration_list : declaration_list COMMA ID

i,j,k,ll,m

Line 3: declaration_list : declaration_list COMMA ID

i,j,k,ll,m,n

Line 3: declaration_list : declaration_list COMMA ID

i,j,k,ll,m,n,o

Line 3: declaration_list : declaration_list COMMA ID

i,j,k,ll,m,n,o,p

Line 3: var_declaration : type_specifier declaration_list SEMICOLON

int i,j,k,ll,m,n,o,p;

Line 3: statement : var_declaration

int i,j,k,ll,m,n,o,p;


Line 3: statements : statement

int i,j,k,ll,m,n,o,p;


Line 4: variable : ID

i

Line 4: factor : variable

i

Line 4: unary_expression : factor

i

Line 4: term : unary_expression

i

Line 4: simple_expression : term

i

Line 4: factor : CONST_INT

3

Line 4: unary_expression : factor

3

Line 4: term : unary_expression

3

Line 4: simple_expression : term

3

Line 4: rel_expression : simple_expression RELOP simple_expression	

i==3

Line 4: logic_expression : rel_expression

i==3

Line 4: expression : logic_expression

i==3

Line 5: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(j);


Line 5: statements : statement

println(j);


Line 6: compound_statement : LCURL statements RCURL

{
println(j);
}




ScopeTable # 1_1_1 



ScopeTable # 1_1 
12 -->  < i : ID> 
13 -->  < j : ID> 
14 -->  < k : ID> 
16 -->  < m : ID> 
17 -->  < n : ID> 
18 -->  < o : ID> 
19 -->  < p : ID> 
29 -->  < ll : ID> 



ScopeTable # 1 
16 -->  < main : ID> 

Line 6: statement : compound_statement

{
println(j);
}


Line 11: statement : IF LPAREN expression RPAREN statement

if(i==3){
println(j);
}


Line 11: statements : statements statement

int i,j,k,ll,m,n,o,p;
if(i==3){
println(j);
}


Line 11: factor : CONST_INT

0

Line 11: unary_expression : factor

0

Line 11: term : unary_expression

0

Line 11: simple_expression : term

0

Line 11: rel_expression : simple_expression

0

Line 11: logic_expression : rel_expression

0

Line 11: expression : logic_expression

0

Line 11: statement : RETURN expression SEMICOLON

return 0;


Line 11: statements : statements statement

int i,j,k,ll,m,n,o,p;
if(i==3){
println(j);
}
return 0;


Line 12: compound_statement : LCURL statements RCURL

{
int i,j,k,ll,m,n,o,p;
if(i==3){
println(j);
}
return 0;
}




ScopeTable # 1_1 
12 -->  < i : ID> 
13 -->  < j : ID> 
14 -->  < k : ID> 
16 -->  < m : ID> 
17 -->  < n : ID> 
18 -->  < o : ID> 
19 -->  < p : ID> 
29 -->  < ll : ID> 



ScopeTable # 1 
16 -->  < main : ID> 

Line 12: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int i,j,k,ll,m,n,o,p;
if(i==3){
println(j);
}
return 0;
}

Line 12: unit : func_definition

int main(){
int i,j,k,ll,m,n,o,p;
if(i==3){
println(j);
}
return 0;
}


Line 12: program : unit

int main(){
int i,j,k,ll,m,n,o,p;
if(i==3){
println(j);
}
return 0;
}


Line 13: start : program





ScopeTable # 1 
16 -->  < main : ID> 


Total lines: 13
Total errors: 0

